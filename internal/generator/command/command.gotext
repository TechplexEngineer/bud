package command

{{- if $.Imports }}

import (
	{{- range $import := $.Imports }}
	{{$import.Name}} "{{$import.Path}}"
	{{- end }}
)
{{- end }}

func New(
	flag *bud.Flag,
	fsys *generator.FileSystem,
	module *gomod.Module,
	newController *new_controller.Command,
) *CLI {
	return &CLI{flag, fsys, module, newController}
}

type CLI struct {
  flag   *bud.Flag
	fsys   *generator.FileSystem
	module *gomod.Module
	newController *new_controller.Command
}

func (c *CLI) Parse(ctx context.Context, args ...string) error {
	project := bud.New(c.fsys, c.module)
	cli := commander.New("cli")

	{ // cli run
		cmd := &runrt.Command{FS: c.fsys, Flag: c.flag, Module: c.module}
		cli := cli.Command("run", "run command")
		cli.Flag("listen", "address to listen to").String(&cmd.Listen).Default(":3000")
		cli.Run(cmd.Run)
	}

	{ // cli build
		cmd := &build.Command{Flag: c.flag, Project: project}
		cli := cli.Command("build", "build command")
		cli.Run(cmd.Run)
	}

	{ // cli new <scaffold>
		cli := cli.Command("new", "new scaffold")

		{ // cli new resource <path> [actions...]
			cli := cli.Command("controller", "new controller")
			cli.Arg("path").String(&c.newController.Path)
			cli.Args("actions").Strings(&c.newController.Actions)
			cli.Run(c.newController.Run)
		}
	}

	return cli.Parse(ctx, args)
}
